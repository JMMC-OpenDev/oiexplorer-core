/*******************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ******************************************************************************/
package fr.jmmc.oiexplorer.core.gui;

import fr.jmmc.jmcs.gui.component.GenericListModel;
import fr.jmmc.oiexplorer.core.function.ConverterFactory;
import fr.jmmc.oiexplorer.core.model.plot.Axis;
import fr.jmmc.oiexplorer.core.model.plot.Range;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;

/**
 * Axis editor widget.
 * 
 * @author mella
 */
public class AxisEditor extends javax.swing.JPanel {

    /** default serial UID for Serializable interface */
    private static final long serialVersionUID = 1L;

    /* members */
    /** PlotDefinitionEditor to notify in case of modification */
    private final PlotDefinitionEditor parentToNotify;
    /** Edited axis reference */
    private Axis axisToEdit;
    /** List of available axis names */
    private final GenericListModel<String> nameComboBoxModel;
    /** Flag notification of associated plotDefinitionEditor */
    private boolean notify = true;

    /** 
     * Creates the new AxisEditor form.
     * Use setAxis() to change model to edit.
     * @param parent PlotDefinitionEditor to be notified of changes.
     */
    public AxisEditor(final PlotDefinitionEditor parent) {
        initComponents();
        parentToNotify = parent;
        nameComboBoxModel = new GenericListModel<String>(new ArrayList<String>(25), true);
        nameComboBox.setModel(nameComboBoxModel);

        // hidden until request and valid code to get a correct behaviour
        final JComponent[] components = new JComponent[]{includeZeroCheckBox, jRadioAuto, jRadioFixed, jFieldMin, jFieldMax};
        for (JComponent c : components) {
            c.setVisible(c.isEnabled());
        }
    }

    /** 
     * Creates new form AxisEditor.
     * This empty constructor leave here for Netbeans GUI builder
     */
    public AxisEditor() {
        this(null);
    }

    /** Initialize widgets according to given axis 
     * 
     * @param axis used to initialize widget states
     * @param axisChoices column names to display
     */
    public void setAxis(final Axis axis, final List<String> axisChoices) {
        axisToEdit = axis;
        nameComboBoxModel.clear();
        if (axis == null) {
            // TODO push in a reset state
            return;
        }
        try {
            notify = false;
            nameComboBoxModel.add(axisChoices);
            nameComboBox.setSelectedItem(axis.getName());

            includeZeroCheckBox.setSelected(axis.isIncludeZero());
            logScaleCheckBox.setSelected(axis.isLogScale());

            updateRangeEditor(axis.getRange(), (axis.getRange() != null));
        } finally {
            notify = true;
        }
    }

    private void updateRangeEditor(final Range range, final boolean auto) {
        if (auto || (range == null)) {
            jFieldMin.setValue(null);
            jFieldMax.setValue(null);
        } else {
            jFieldMin.setValue(range.getMin());
            jFieldMax.setValue(range.getMax());
        }
        jRadioAuto.setSelected(auto);
        jFieldMin.setEnabled(!auto);
        jFieldMax.setEnabled(!auto);
    }

    private Range getFieldRange() {
        Object minValue = this.jFieldMin.getValue();
        Object maxValue = this.jFieldMax.getValue();
        if ((minValue instanceof Double) && (maxValue instanceof Double)) {
            final double min = ((Double) minValue).doubleValue();
            final double max = ((Double) maxValue).doubleValue();

            if ((min < max)
                    && !Double.isNaN(min) && !Double.isInfinite(min)
                    && !Double.isNaN(max) && !Double.isInfinite(max)) {
                final Range range = new Range();
                range.setMin(min);
                range.setMax(max);
                return range;
            }
        }
        return null;
    }

    /** 
     * Return the edited Axis.
     * @return the edited Axis.
     */
    public Axis getAxis() {
        return axisToEdit;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupBounds = new javax.swing.ButtonGroup();
        nameComboBox = new javax.swing.JComboBox();
        logScaleCheckBox = new javax.swing.JCheckBox();
        includeZeroCheckBox = new javax.swing.JCheckBox();
        jPanelBounds = new javax.swing.JPanel();
        jRadioAuto = new javax.swing.JRadioButton();
        jRadioFixed = new javax.swing.JRadioButton();
        jFieldMin = new javax.swing.JFormattedTextField();
        jFieldMax = new javax.swing.JFormattedTextField();

        setLayout(new java.awt.GridBagLayout());

        nameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AxisEditor.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(nameComboBox, gridBagConstraints);

        logScaleCheckBox.setText("log");
        logScaleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AxisEditor.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        add(logScaleCheckBox, gridBagConstraints);

        includeZeroCheckBox.setText("inc. 0");
        includeZeroCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AxisEditor.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        add(includeZeroCheckBox, gridBagConstraints);

        jPanelBounds.setLayout(new java.awt.GridBagLayout());

        buttonGroupBounds.add(jRadioAuto);
        jRadioAuto.setSelected(true);
        jRadioAuto.setText("auto");
        jRadioAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AxisEditor.this.actionPerformed(evt);
            }
        });
        jPanelBounds.add(jRadioAuto, new java.awt.GridBagConstraints());

        buttonGroupBounds.add(jRadioFixed);
        jRadioFixed.setText("fixed");
        jRadioFixed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AxisEditor.this.actionPerformed(evt);
            }
        });
        jPanelBounds.add(jRadioFixed, new java.awt.GridBagConstraints());

        jFieldMin.setColumns(10);
        jFieldMin.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.###"))));
        jFieldMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AxisEditor.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        jPanelBounds.add(jFieldMin, gridBagConstraints);

        jFieldMax.setColumns(10);
        jFieldMax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.###"))));
        jFieldMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AxisEditor.this.actionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanelBounds.add(jFieldMax, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(jPanelBounds, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformed
        boolean forceRefreshPlotDefNames = false;

        if (evt.getSource() == includeZeroCheckBox) {
            axisToEdit.setIncludeZero(includeZeroCheckBox.isSelected());
        } else if (evt.getSource() == logScaleCheckBox) {
            axisToEdit.setLogScale(logScaleCheckBox.isSelected());
        } else if (evt.getSource() == nameComboBox) {
            final String columnName = (String) nameComboBox.getSelectedItem();
            axisToEdit.setName(columnName);

            // only modify axis if the user changes the axis, not by swing events due to model changes:
            if (notify) {
                // reset converter and log scale:
                axisToEdit.setConverter(ConverterFactory.getInstance().getDefaultByColumn(columnName));
                axisToEdit.setLogScale(logScaleCheckBox.isSelected());
                // force refresh plot definition names:
                forceRefreshPlotDefNames = true;
            }
        } else if (evt.getSource() == jRadioAuto) {
            axisToEdit.setRange(null);
            updateRangeEditor(axisToEdit.getRange(), true);
        } else if (evt.getSource() == jRadioFixed) {
            updateRangeEditor(axisToEdit.getRange(), false);
        } else if (evt.getSource() == jFieldMin) {
            axisToEdit.setRange(getFieldRange());
        } else if (evt.getSource() == jFieldMax) {
            axisToEdit.setRange(getFieldRange());
        } else {
            throw new IllegalStateException("TODO handling of event from " + evt.getSource());
        }

        if (notify) {
            parentToNotify.updateModel(forceRefreshPlotDefNames);
        }
    }//GEN-LAST:event_actionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupBounds;
    private javax.swing.JCheckBox includeZeroCheckBox;
    private javax.swing.JFormattedTextField jFieldMax;
    private javax.swing.JFormattedTextField jFieldMin;
    private javax.swing.JPanel jPanelBounds;
    private javax.swing.JRadioButton jRadioAuto;
    private javax.swing.JRadioButton jRadioFixed;
    private javax.swing.JCheckBox logScaleCheckBox;
    private javax.swing.JComboBox nameComboBox;
    // End of variables declaration//GEN-END:variables
}
